{"version":3,"sources":["services/dataService.tsx","components/product/styles.tsx","components/product/chart-options.tsx","components/product/product.component.tsx","components/products-list/styles.tsx","components/products-list/product-list.component.tsx","components/product-form/styles.tsx","components/product-form/product-form.component.tsx","utils/utilsFunctions.tsx","components/tabs/tab.component.tsx","components/product/product-details.component.tsx","components/product/product-chart-component.tsx","components/language-selector/language-selector.component.tsx","i18n/i18n.tsx","App.tsx","index.tsx"],"names":["PRODUCT_KEY","PRICE_HISTORY_KEY","QUANTITY_HISTORY_KEY","LANGUAGE_KEY","a","localForage","getItem","then","products","getProduct","id","find","product","setProductPriceHistory","price","setProductQuantityHistory","quantity","setItem","data","length","newProducts","map","item","productID","filter","deleteProductPriceHistory","deleteProductQuantityHistory","res","allProductsHistory","productHistory","priceHistory","push","modifiedAt","moment","utc","format","shift","quantityHistory","language","config","driver","LOCALSTORAGE","makeStyles","theme","createStyles","wrapper","margin","padding","maxWidth","btnContainer","display","justifyContent","flex","spacing","ChartOptions","index","chartData","chart","type","title","text","xAxis","categories","yAxis","labels","plotOptions","line","dataLabels","enabled","series","showInLegend","name","Number","Product","useState","setProduct","setPriceHistory","setQuantityHistory","chartOptions","setChartOptions","useParams","history","useHistory","React","openTab","setOpenTab","classes","useStyles","translate","useTranslation","t","useEffect","getProductPriceHistory","getProductQuantityHistory","className","Typography","variant","align","style","marginBottom","Card","Tabs","value","indicatorColor","textColor","onChange","event","tabIndex","options","centered","Tab","label","CardContent","CardActions","disableSpacing","Button","color","component","RouterLink","to","mb2","pageHeader","borderBottom","fontSize","fontWeight","tableContainer","width","height","actionsContainer","marginLeft","marginRight","conf_modal","paddingTop","paddingBottom","position","top","left","transform","conf_modal_actions","borderTop","ProductsList","setProducts","activeProductID","setActiveProductID","openModal","setOpenModal","page","setPage","rowsPerPage","setRowsPerPage","updateActive","updateProducts","active","getAllProducts","modalContent","onClick","e","deleteProductService","TableContainer","Paper","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","slice","key","scope","ean","weight","Checkbox","checked","size","productId","TablePagination","onChangeRowsPerPage","parseInt","target","count","onChangePage","newPage","Modal","open","onClose","checkLabel","ProductForm","replace","c","piece","Math","random","toString","errors","setErrors","isInvalid","updateProductField","field","validateForm","prevProd","trim","isNaN","match","Container","noValidate","autoComplete","onSubmit","preventDefault","updateProductService","setTimeout","goBack","addProductService","FormGroup","FormControl","TextField","required","onBlur","error","helperText","InputLabel","Select","MenuItem","FormControlLabel","control","labelPlacement","disabled","TabPanel","props","children","other","role","hidden","ProductDetails","CheckBox","CancelRounded","ProductChart","highcharts","Highcharts","LanguageSelector","i18n","currentLang","setCurrentLang","switchLanguage","changeLanguage","setCurrentLanguage","window","document","documentElement","lang","getCurrentLanguage","ButtonGroup","use","Backend","initReactI18next","init","lng","backend","loadPath","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","formatSeparator","react","wait","App","fallback","path","exact","render","getElementById"],"mappings":"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","file":"static/js/main.3fde3cb8.chunk.js","sourcesContent":["import localForage from 'localforage';\r\nimport { IProduct } from '../models/product';\r\nimport moment from 'moment';\r\n\r\nconst PRODUCT_KEY = 'wi_products';\r\nconst PRICE_HISTORY_KEY = 'wi_products_price_history';\r\nconst QUANTITY_HISTORY_KEY = 'wi_products_quantity_history';\r\nconst LANGUAGE_KEY = 'wi_current_language';\r\nlocalForage.config({\r\n    driver: [\r\n        localForage.LOCALSTORAGE,\r\n    ]\r\n});\r\n\r\n/**\r\n* Get all products from localStorage\r\n*\r\n* @returns products [] | []\r\n*/\r\nexport async function getAllProducts() {\r\n    return localForage.getItem(PRODUCT_KEY).then((products) => {\r\n        if (products) return products;\r\n        return [];\r\n    });\r\n}\r\n\r\n\r\n/**\r\n* Get single product from localStorage\r\n*\r\n* @param id: string\r\n* @returns product {} | null\r\n*/\r\nexport async function getProduct(id:string) {\r\n    return localForage.getItem(PRODUCT_KEY).then((products:any) => {\r\n        if (products) {\r\n            return products.find((product: IProduct) => product.id === id);\r\n        }\r\n        return null;\r\n    });\r\n}\r\n\r\n/**\r\n* Add a product to localStorage\r\n*\r\n* @remarks\r\n* Add product to the product list array\r\n* If there is no exisiting product list, creates an empty array\r\n*\r\n* @param product: {IProduct}\r\n* @returns true | false\r\n*/\r\nexport async function addProduct(product:IProduct) {\r\n    return localForage.getItem(PRODUCT_KEY).then((products: any) => {\r\n        if (products) {\r\n            products = [product, ...products];\r\n        } else {\r\n            products = [product];\r\n        }\r\n\r\n        setProductPriceHistory(product.id, product.price);\r\n        setProductQuantityHistory(product.id, product.quantity);\r\n\r\n        return localForage.setItem(PRODUCT_KEY, products).then((data: any) => {\r\n            if (data) return true;\r\n            return false;\r\n        });\r\n    }); \r\n}\r\n\r\n/**\r\n* Update multiple products\r\n*\r\n* @param products - an array of products to be updated\r\n* @returns All the products\r\n*/\r\nexport async function updateProducts(products:IProduct[]) {\r\n\r\n    return localForage.setItem(PRODUCT_KEY, products).then((data:any) => {\r\n        if (data) return data;\r\n        return [];\r\n    });\r\n}\r\n\r\n\r\n/**\r\n* Update single product\r\n*\r\n* @remarks\r\n* Get all the products from the localStorage\r\n* find a product by the `product.id`\r\n* Create a new product list with the updated product\r\n* Store the new product list in the localStorage\r\n*\r\n* @param product {IProduct}\r\n* @returns products []\r\n*/\r\nexport async function updateProduct(product: IProduct) {\r\n    return localForage.getItem(PRODUCT_KEY).then((data) => {\r\n        const products: any = data;\r\n\r\n        if (products && products.length) {\r\n            const newProducts = products.map((item: IProduct) => {\r\n                if (item.id === product.id ) {\r\n                    if (item.price !== product.price) {\r\n                        setProductPriceHistory(product.id, product.price);\r\n                    } \r\n                    if (item.quantity !== product.quantity) {\r\n                        setProductQuantityHistory(product.id, product.quantity);\r\n                    }\r\n                    return product;\r\n                }\r\n                return item;\r\n            });\r\n\r\n            return localForage.setItem(PRODUCT_KEY, newProducts).then((data:IProduct[]) => {\r\n                return data;\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n* Delete product\r\n*\r\n* @remarks\r\n* Get all the products from the localStorage\r\n* find a product by the `product.id`\r\n* Create a new products array without the target product\r\n* Store the new product list in the localStorage\r\n* Delete the product's Price History\r\n* Delete the product's Quantity History\r\n*\r\n* @param id:string\r\n* @returns products []\r\n*/\r\nexport async function deleteProduct(productID:string) {\r\n    return localForage.getItem(PRODUCT_KEY).then((data) => {\r\n        const products:any = data;\r\n\r\n        if (products && products.length) {\r\n            const newProducts = products.filter((product: IProduct) => product.id !== productID);\r\n\r\n            //deleting the price & quantity history\r\n            deleteProductPriceHistory(productID);\r\n            deleteProductQuantityHistory(productID);\r\n\r\n\r\n            return localForage.setItem(PRODUCT_KEY, newProducts).then((data) => {\r\n                if (data)\r\n                    return data;\r\n                return [];\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\n\r\n/**\r\n* Add/Update a product's price history\r\n* Product Price History is an object\r\n* Each product's id is a property\r\n* Each property contains an array of object\r\n* Each object contains the price and the time of price update\r\n* Price history array of each product can contain max 5 objects\r\n* \r\n* @remarks\r\n* Get the price history of all the products\r\n* If the price history of the product exists, add the new price and current time as an item\r\n* If the price history of the products contains more than 5 items, delete the first/oldest item\r\n* If the price history of the product doesn't exist, create an empty array and add the new price and current time as an item\r\n*\r\n* @param id:string - id of the product\r\n* @param price:number - current price of the product\r\n* @returns void\r\n*/\r\nexport async function setProductPriceHistory(id:string, price:number) {\r\n    localForage.getItem(PRICE_HISTORY_KEY).then((res) => {\r\n        let allProductsHistory:any = res;\r\n\r\n        if (allProductsHistory && allProductsHistory[id]) {\r\n            const productHistory = allProductsHistory[id];\r\n            if (productHistory.priceHistory) {\r\n                productHistory.priceHistory.push({ price, modifiedAt: moment().utc().format()});\r\n                if (productHistory.priceHistory.length > 5) {\r\n                    productHistory.priceHistory.shift();\r\n                }\r\n            } else {\r\n                productHistory.priceHistory = [{ price, modifiedAt: moment().utc().format() }];\r\n            }\r\n        } else if (allProductsHistory) {\r\n            allProductsHistory[id] = {\r\n                priceHistory: [{ price, modifiedAt: moment().utc().format() }]\r\n            }\r\n        } else {\r\n            allProductsHistory = {};\r\n            allProductsHistory[id] = {\r\n                priceHistory: [{ price, modifiedAt: moment().utc().format() }]\r\n            }\r\n        }\r\n\r\n        localForage.setItem(PRICE_HISTORY_KEY, allProductsHistory).then((res) => {\r\n            //console.log(res)\r\n        });\r\n    });\r\n}\r\n\r\n\r\n/**\r\n* Get the price history of a product\r\n*\r\n* @param id: string\r\n* @returns history [] | null\r\n*/\r\nexport async function getProductPriceHistory(id:string) {\r\n    return localForage.getItem(PRICE_HISTORY_KEY).then((res) => {\r\n        let allProductsHistory:any = res;\r\n        if (allProductsHistory && allProductsHistory[id] && allProductsHistory[id].priceHistory) {\r\n            return allProductsHistory[id].priceHistory;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n* Delete a product's price history\r\n* This function is called from `deleteProduct`\r\n*\r\n* @param id: string\r\n* @returns void\r\n*/\r\nexport async function deleteProductPriceHistory(id: string) {\r\n    localForage.getItem(PRICE_HISTORY_KEY).then((data) => {\r\n        const priceHistory: any = data;\r\n        if (priceHistory && priceHistory[id]) {\r\n            delete priceHistory[id]\r\n            localForage.setItem(PRICE_HISTORY_KEY, priceHistory);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n* Add/Update a product's quantity history\r\n* Product Quantity History is an object\r\n* Each product's id is a property\r\n* Each property contains an array of object\r\n* Each object contains the quantity and the time of quantity update\r\n* Quantity history array of each product can contain max 5 objects\r\n*\r\n* @remarks\r\n* Get the quantity history of all the products\r\n* If the quantity history of the product exists, add the new quantity and current time as an item\r\n* If the quantity history of the products contains more than 5 items, delete the first/oldest item\r\n* If the quantity history of the product doesn't exist, create an empty array and add the new quantity and current time as an item\r\n*\r\n* @param id:string - id of the product\r\n* @param quantity:number - current quantity of the product\r\n* @returns void\r\n*/\r\nexport async function setProductQuantityHistory(id:string, quantity:number) {\r\n    localForage.getItem(QUANTITY_HISTORY_KEY).then((res) => {\r\n        let allProductsHistory: any = res;\r\n        if (allProductsHistory && allProductsHistory[id]) {\r\n            const productHistory = allProductsHistory[id];\r\n            if (productHistory.quantityHistory) {\r\n                productHistory.quantityHistory.push({ quantity, modifiedAt: moment().utc().format() });\r\n                if (productHistory.quantityHistory.length > 5) {\r\n                    productHistory.quantityHistory.shift();\r\n                }\r\n            } else {\r\n                productHistory.quantityHistory = [{ quantity, modifiedAt: moment().utc().format() }];\r\n            }\r\n        } else if (allProductsHistory) {\r\n            allProductsHistory[id] = {\r\n                quantityHistory: [{ quantity, modifiedAt: moment().utc().format() }]\r\n            }\r\n        } else {\r\n            allProductsHistory = {};\r\n            allProductsHistory[id] = {\r\n                quantityHistory: [{ quantity, modifiedAt: moment().utc().format() }]\r\n            }\r\n        }\r\n\r\n        localForage.setItem(QUANTITY_HISTORY_KEY, allProductsHistory).then((res) => {\r\n            //console.log(res)\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n* Get the quantity history of a product\r\n*\r\n* @param id: string\r\n* @returns history [] | null\r\n*/\r\nexport async function getProductQuantityHistory(id: string) {\r\n    return localForage.getItem(QUANTITY_HISTORY_KEY).then((res) => {\r\n        let allProductsHistory: any = res;\r\n        if (allProductsHistory && allProductsHistory[id] && allProductsHistory[id].quantityHistory) {\r\n            return allProductsHistory[id].quantityHistory;\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n}\r\n\r\n\r\n/**\r\n* Delete a product's quantity history\r\n* This function is called from `deleteProduct`\r\n*\r\n* @param id: string\r\n* @returns void\r\n*/\r\nexport async function deleteProductQuantityHistory(id: string) {\r\n    localForage.getItem(QUANTITY_HISTORY_KEY).then((data) => {\r\n        const quantityHistory: any = data;\r\n\r\n        if (quantityHistory && quantityHistory[id]) {\r\n            delete quantityHistory[id]\r\n            localForage.setItem(QUANTITY_HISTORY_KEY, quantityHistory);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport async function getCurrentLanguage() {\r\n    return localForage.getItem(LANGUAGE_KEY).then((language) => {\r\n        if (language) {\r\n            return language;\r\n        }\r\n        return 'en';\r\n    });\r\n}\r\n\r\nexport async function setCurrentLanguage(language:string) {\r\n    localForage.setItem(LANGUAGE_KEY, language)\r\n}","import { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        wrapper: {\r\n            margin: \"2rem auto 0\",\r\n            padding: \"1rem\",\r\n            maxWidth: \"600px\",\r\n        },\r\n        btnContainer: {\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            flex: 'auto',\r\n            '& > *': {\r\n                margin: theme.spacing(1),\r\n            },\r\n        },\r\n    }),\r\n);","import moment from 'moment';\r\nimport { IChartOptions } from '../../models/chart'\r\n\r\nconst ChartOptions = (index:number, chartData:[]) => {\r\n\r\n    const options: IChartOptions = {\r\n        chart: {\r\n            type: 'line'\r\n        },\r\n        title: {\r\n            text: null\r\n        },\r\n        xAxis: {\r\n            categories: chartData?.map((item: any) => moment(item.modifiedAt).format('lll'))\r\n        },\r\n        yAxis: {\r\n            labels: {\r\n                // eslint-disable-next-line no-template-curly-in-string\r\n                format: index === 1 ? '${value}' : null,\r\n            },\r\n            title: {\r\n                text: index === 1 ? 'Price' : 'Quantity'\r\n            }\r\n        },\r\n        plotOptions: {\r\n            line: {\r\n                dataLabels: {\r\n                    enabled: true\r\n                },\r\n            }\r\n        },\r\n        series: [{\r\n            showInLegend: false,\r\n            name: index === 1 ? 'Price' : 'Quantity',\r\n            data: chartData?.map((item: any) => index === 1 ? Number(item.price) : Number(item.quantity)),\r\n            // eslint-disable-next-line no-template-curly-in-string\r\n            format: index === 1 ? '${value}' : null,\r\n        }]\r\n    }\r\n\r\n    return options;\r\n}\r\n\r\nexport default ChartOptions;","import React, { useEffect, useState } from 'react';\r\nimport { useParams, useHistory, Link as RouterLink } from \"react-router-dom\";\r\nimport { getProduct, getProductPriceHistory, getProductQuantityHistory } from '../../services/dataService';\r\nimport { TabPanel, ProductDetails, ProductChart} from '../../components';\r\nimport { IProduct } from '../../models/product';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport { Button, Card, CardContent, CardActions, Typography } from '../../material.components';\r\nimport useStyles from './styles';\r\nimport ChartOptions from './chart-options';\r\nimport { IChartOptions } from '../../models/chart';\r\n\r\n\r\n\r\nexport default function Product() {\r\n    const [product, setProduct] = useState<IProduct | null>(null);\r\n    const [priceHistory, setPriceHistory] = useState<[] | null>(null);\r\n    const [quantityHistory, setQuantityHistory] = useState<[] | null>(null);\r\n    const [chartOptions, setChartOptions] = useState<IChartOptions | null>(null);\r\n    const { id } = useParams<{id:string}>();\r\n    const history = useHistory();\r\n    const [openTab, setOpenTab] = React.useState(0);\r\n    const classes = useStyles();\r\n    const { t: translate } = useTranslation();\r\n\r\n\r\n    /**\r\n    * Product Detail tabs switch handler\r\n    * @remarks\r\n    * 0: details tab, 1: price history tab, 2: quantity history tab\r\n    * If price history or quantity history tab is selected\r\n    * chart-options will be prepared with the relative data\r\n    *\r\n    * @param1 - event: onChange event\r\n    * @param2 - Index of clicked tab\r\n    * @returns Void\r\n    */\r\n    function switchTab(event: React.ChangeEvent<{}>, tabIndex: number) {\r\n        setOpenTab(tabIndex);\r\n        if (tabIndex === 1 && priceHistory) {\r\n            const options: IChartOptions = ChartOptions(tabIndex, priceHistory);\r\n            setChartOptions(options);\r\n\r\n        } else if (tabIndex === 2 && quantityHistory) {\r\n            const options: IChartOptions = ChartOptions(tabIndex, quantityHistory);\r\n            setChartOptions(options);\r\n        }\r\n    };\r\n    \r\n    useEffect(() => {\r\n        if (id) {\r\n            getProduct(id).then((res) => {\r\n                if (res) {\r\n                    setProduct(res);\r\n                } else {\r\n                    history.push('/');\r\n                }\r\n            });\r\n\r\n            getProductPriceHistory(id).then((res) => setPriceHistory(res));\r\n\r\n            getProductQuantityHistory(id).then((res) => setQuantityHistory(res));\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        product &&\r\n        (\r\n            <div className={classes.wrapper}>\r\n                <Typography variant=\"h5\" align=\"center\" style={{ marginBottom: 20 }}>{translate('product.pageTitle')}</Typography>\r\n                <Card>\r\n\r\n                    <Tabs\r\n                        value={openTab}\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        onChange={switchTab}\r\n                        centered\r\n                    >\r\n                        <Tab label={translate('product.pageTitle')} tabIndex={0} />\r\n                        <Tab label={translate('product.priceTab')} tabIndex={1} />\r\n                        <Tab label={translate('product.quantityTab')} tabIndex={2} />\r\n                    </Tabs>\r\n\r\n\r\n                    <TabPanel value={openTab} index={0}>\r\n                        <ProductDetails product={product} />\r\n                    </TabPanel>\r\n\r\n\r\n                    <TabPanel value={openTab} index={1}>\r\n                        {priceHistory ? (\r\n                            <ProductChart chartOptions={chartOptions} />\r\n                        ) : (\r\n                            <CardContent><h3>{translate('product.noHistory')}</h3></CardContent>\r\n                        )}\r\n                    </TabPanel>\r\n                    \r\n \r\n                    <TabPanel value={openTab} index={2}>\r\n                        {quantityHistory ? (\r\n                            <ProductChart chartOptions={chartOptions} />\r\n                        ) : (\r\n                            <CardContent><h3>{translate('product.noHistory')}</h3></CardContent>\r\n                        )}\r\n                    </TabPanel>\r\n\r\n\r\n\r\n                    <CardActions disableSpacing>\r\n                        <div className={classes.btnContainer}>\r\n\r\n                            <Button variant=\"contained\" color=\"secondary\" component={RouterLink} to={`/products/${product.id}/edit`}>\r\n                                {translate('product.editButton')}\r\n                            </Button>\r\n                            <Button type=\"submit\" variant=\"contained\" color=\"primary\" component={RouterLink} to=\"/products\">\r\n                                {translate('product.backButton')}\r\n                            </Button>\r\n\r\n                        </div>\r\n                    </CardActions>\r\n                </Card>\r\n            </div>\r\n        )\r\n    );\r\n}","import { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        mb2: {\r\n            marginBottom: '2rem'\r\n        },\r\n        pageHeader: {\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            padding: '2rem 0 1rem',\r\n            borderBottom: '1px solid #e4e4e4',\r\n            '& h1': {\r\n                fontSize: '2rem',\r\n                fontWeight: 400,\r\n                color: '#444',\r\n                margin: 0\r\n            }\r\n        },\r\n        tableContainer: {\r\n            width: '100%',\r\n            height: '400px'\r\n        },\r\n        actionsContainer: {\r\n            '& > *': {\r\n                marginLeft: '3px',\r\n                marginRight: '3px',\r\n                marginBottom: '5px'\r\n            }\r\n        },\r\n        conf_modal: {\r\n            paddingTop: '1rem',\r\n            paddingBottom: '0.5rem',\r\n            width: '98%',\r\n            maxWidth: 400,\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)'\r\n        },\r\n        conf_modal_actions: {\r\n            padding: '15px 20px',\r\n            justifyContent: 'flex-end',\r\n            borderTop: '1px solid #e4e4e4',\r\n        }\r\n    }),\r\n);","import React, { useState, useEffect } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { getAllProducts, deleteProduct as deleteProductService, updateProducts } from '../../services/dataService';\r\nimport { IProduct } from '../../models/product';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Button, Checkbox, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Modal, Card, CardContent, CardActions, Typography } from '../../material.components';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport useStyles from './styles';\r\n\r\nexport default function ProductsList() {\r\n    const classes = useStyles();\r\n    const [products, setProducts] = useState<IProduct[]>([]);\r\n    const [activeProductID, setActiveProductID] = useState('');\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n    const { t:translate } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        getAllProducts().then((data:any) => {\r\n            setProducts(data);\r\n        })\r\n    }, []);\r\n\r\n    /**\r\n    * Show product delete confirmation modal\r\n    * @remarks\r\n    * Clicking on the delete button of a product will open a modal\r\n    *\r\n    * @param1 - product id\r\n    * @returns Void\r\n    */\r\n    function confirmDelete(productId: IProduct[\"id\"]) {\r\n        setActiveProductID(productId);\r\n        setOpenModal(true);\r\n    }\r\n\r\n    /**\r\n    * Delete product\r\n    * @remarks\r\n    * when a user click the Delete button in the modal\r\n    * checks the active product id\r\n    * calls the Delete Product method from the service \r\n    * gets the updated product list and sets to state\r\n    * closes the modal\r\n    * resets the value of active product id  \r\n    *\r\n    * @returns Void\r\n    */\r\n    function deleteProduct() {\r\n        if (activeProductID && products.length) {\r\n            deleteProductService(activeProductID).then((res) => {\r\n                setProducts(res);\r\n                setOpenModal(false);\r\n                setActiveProductID('');\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Update product active state\r\n    * @remarks\r\n    * Clicking on the checkbox of a product from the product list table\r\n    * will update the active state of the product\r\n    *\r\n    * @param1 - product id\r\n    * @returns Void\r\n    */\r\n    function updateActive(id: IProduct[\"id\"]) {\r\n        const newProducts = products.map((item: IProduct) => item.id === id ? ({ ...item, active: !item.active }) : item);\r\n        updateProducts(newProducts).then((res) => {\r\n            setProducts(res);\r\n        })\r\n    }\r\n\r\n    /**\r\n    * Modal Container\r\n    * @remarks\r\n    * Two click event handlers:\r\n    * will update the active state of the product\r\n    * setOpenModal: closes the modal\r\n    * deleteProduct: Sends delete request and closes the modal\r\n    */\r\n    const modalContent = (\r\n        <Card className={classes.conf_modal}>\r\n            <CardContent>\r\n                <h2>{translate('productList.deleteConfirmation')}</h2>\r\n            </CardContent>\r\n            <CardActions className={classes.conf_modal_actions}>\r\n                <Button variant=\"contained\" onClick={(e) => setOpenModal(false)}>{translate('productList.cancelButton')}</Button>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={deleteProduct}>{translate('productList.deleteButton')}</Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n\r\n    function handleChangePage(event: unknown, newPage: number) {\r\n        setPage(newPage);\r\n    };\r\n\r\n    function handleChangeRowsPerPage (event: React.ChangeEvent<HTMLInputElement>) {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    return(\r\n        <>\r\n            <div className={`${classes.pageHeader} ${classes.mb2}`}>\r\n                <Typography variant=\"h5\">{translate('productList.pageTitle')}</Typography>\r\n                <Button variant=\"contained\" color=\"primary\" component={RouterLink} to=\"/products/add\">{translate('productList.addButton')}</Button>\r\n            </div>\r\n            \r\n            {\r\n                products.length > 0 ?\r\n                (\r\n                    <>\r\n                        <div className={classes.tableContainer}>\r\n                            <TableContainer component={Paper}>\r\n                                <Table stickyHeader>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>{translate('productList.tableHeaders.name')}</TableCell>\r\n                                            <TableCell align=\"right\">{translate('productList.tableHeaders.ean')}</TableCell>\r\n                                            <TableCell>{translate('productList.tableHeaders.type')}</TableCell>\r\n                                            <TableCell align=\"right\">{translate('productList.tableHeaders.weight')}</TableCell>\r\n                                            <TableCell>{translate('productList.tableHeaders.color')}</TableCell>\r\n                                            <TableCell align=\"right\">{translate('productList.tableHeaders.quantity')}</TableCell>\r\n                                            <TableCell align=\"right\">{translate('productList.tableHeaders.price')}</TableCell>\r\n                                            <TableCell>{translate('productList.tableHeaders.active')}</TableCell>\r\n                                            <TableCell></TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n\r\n                                        {(rowsPerPage > 0\r\n                                            ? products.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                            : products\r\n                                        ).map((product:IProduct) => (\r\n                                            <TableRow key={product.id}>\r\n                                                <TableCell component=\"th\" scope=\"row\">\r\n                                                    {product.name}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"right\">{product.ean}</TableCell>\r\n                                                <TableCell>{product.type}</TableCell>\r\n                                                <TableCell align=\"right\">{product.weight}</TableCell>\r\n                                                <TableCell>{product.color}</TableCell>\r\n                                                <TableCell align=\"right\">{product.quantity}</TableCell>\r\n                                                <TableCell align=\"right\">{`$${product.price}`}</TableCell>\r\n                                                <TableCell>\r\n                                                    <Checkbox\r\n                                                        color=\"primary\"\r\n                                                        checked={product.active}\r\n                                                        onChange={() => updateActive(product.id)}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <div className={classes.actionsContainer}>\r\n                                                        <Button variant=\"contained\" component={RouterLink} size=\"small\" \r\n                                                            to={`/products/${product.id}`}\r\n                                                        >\r\n                                                            {translate('productList.viewButton')}\r\n                                                        </Button>\r\n\r\n                                                        <Button variant=\"contained\" color=\"primary\" component={RouterLink} size=\"small\"  \r\n                                                            to={`/products/${product.id}/edit`}\r\n                                                        >\r\n                                                            {translate('productList.editButton')}\r\n                                                        </Button>\r\n\r\n                                                        <Button variant=\"contained\" color=\"secondary\" size=\"small\" \r\n                                                            onClick={(e) => confirmDelete(product.id)}\r\n                                                        >\r\n                                                            {translate('productList.deleteButton')}\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                            <TablePagination\r\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                                component='div'\r\n                                count= {products.length}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                onChangePage={handleChangePage}\r\n                            />\r\n                        </div>\r\n                        <Modal\r\n                            open={openModal}\r\n                            onClose={(e) => setOpenModal(false)}\r\n                        >{modalContent}</Modal>\r\n                    </>\r\n                ) :\r\n                (\r\n                    <Typography variant=\"h5\">{translate('productList.noProduct')}</Typography>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n}","import { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        wrapper: {\r\n            maxWidth: 600,\r\n            margin: '25px auto 0',\r\n            padding: '2rem'\r\n        },\r\n        checkLabel: {\r\n            marginLeft: 0,\r\n            justifyContent: 'flex-end'\r\n        },\r\n        mb2: {\r\n            marginBottom: '2rem'\r\n        },\r\n        btnContainer: {\r\n            display: 'flex',\r\n            justifyContent: 'flex-end',\r\n            marginRight: -(theme.spacing(1)),\r\n            '& > *': {\r\n                margin: theme.spacing(1),\r\n            },\r\n        },\r\n        pageHeader: {\r\n            borderBottom: '1px solid #e4e4e4',\r\n            paddingBottom: '1rem',\r\n            marginBottom: '1.5rem'\r\n        }\r\n    }),\r\n);","import React, { useState, useEffect } from 'react';\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { addProduct as addProductService, updateProduct as updateProductService, getProduct } from '../../services/dataService';\r\nimport { IProduct } from '../../models/product';\r\nimport { IErrors } from '../../models/error';\r\nimport { getUUID } from '../../utils/utilsFunctions';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Paper, Container, Button, TextField, FormGroup, FormControl, InputLabel, Select, MenuItem, FormControlLabel, Checkbox, Typography } from '../../material.components';\r\nimport useStyles from './styles';\r\n\r\nexport default function ProductForm() {\r\n    const [product, setProduct] = useState<IProduct>({\r\n        id: getUUID(),\r\n        name: '',\r\n        ean: '',\r\n        type: '',\r\n        weight: '',\r\n        color: '',\r\n        price: 0,\r\n        quantity: 0,\r\n        active: true\r\n    });\r\n    const { id } = useParams<{ id:string }>();\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const { t: translate } = useTranslation();\r\n    const [errors, setErrors] = useState <IErrors>({\r\n        name: '',\r\n        ean: '',\r\n        type: '',\r\n        weight: '',\r\n        color: '',\r\n        price: '',\r\n        quantity: ''\r\n    });\r\n\r\n    const isInvalid = product.name === '' || product.ean === '' || product.type === '' || product.weight === '' || product.color === '';\r\n\r\n    /**\r\n    * Product form submit handler.\r\n    * @remarks\r\n    * Checks if the form values are valid\r\n    * Checks if the `id` param is available in the `history` object\r\n    * If the `id` is undefined, creates a new product. Otherwise, update the existing product\r\n    *\r\n    * @returns Void\r\n    */\r\n    function formSubmit(event:React.FormEvent) {\r\n        event.preventDefault();\r\n        if (!isInvalid) {\r\n            \r\n            if (!id) {\r\n                addProductService(product).then(() => {\r\n                    setTimeout(function () {\r\n                        history.push(\"/products\");\r\n                    }, 100);\r\n                });\r\n            } else {\r\n                updateProductService(product).then(() => {\r\n                    setTimeout(function () {\r\n                        history.goBack();\r\n                    }, 100);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Form `onChange` event handler\r\n    * @remarks\r\n    * Runs everytime when the value of any field changes \r\n    * Converts the value of `price` and `quantity` fields to Number\r\n    * Sets the fields value to the local state\r\n    *\r\n    * @returns Void\r\n    */\r\n\r\n    function updateProductField(event: React.ChangeEvent<any>) {\r\n        const field = event.target;\r\n\r\n        if (field.name === 'active') {\r\n            setProduct((product: IProduct) => ({ ...product, [field.name]: field.checked }));\r\n        } else {\r\n            setProduct((product: IProduct) => ({ ...product, [field.name]: field.value }));\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n    * Form Validator - Form fields `onBlur` event handler\r\n    * @remarks\r\n    * Runs everytime when a field is blurred and checks if valid data has been provided\r\n    * The `name`, `ean`, `weight`, `color`, 'price` & `quantity` fields are required and shows an error if they are left empty\r\n    * Sets the fields value to the local state\r\n    *\r\n    * @returns Void\r\n    */\r\n    function validateForm(event: React.FocusEvent<HTMLInputElement>) {\r\n        const { name, value } =event.target;\r\n\r\n        if (name === 'name' || name === 'ean' || name === 'weight' || name === 'color' || name === 'price' || name === 'quantity') {\r\n            setProduct((prevProd) => ({ ...prevProd, [name]: value.trim() }));\r\n            if (value.trim().length === 0) {\r\n                setErrors({ ...errors, [name]: `${name} can't be empty` });\r\n            } else {\r\n                setErrors({ ...errors, [name]: '' });\r\n            }\r\n        }\r\n        if (name === 'weight' || name === 'price' || name === 'quantity') {\r\n            if (isNaN(Number(value))) {\r\n                setErrors({ ...errors, [name]: 'Only numbers are allowed' });\r\n            } else {\r\n                setErrors({ ...errors, [name]: '' });\r\n            }\r\n        }\r\n        if (name === 'color') {\r\n            if (value.match(/^[a-zA-Z]+$/) === null) {\r\n                setErrors({ ...errors, color: 'Only alphabets are allowed' });\r\n            } else {\r\n                setErrors({ ...errors, color: '' });\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            getProduct(id).then((res) => {\r\n                if (res) {\r\n                    setProduct(res);\r\n                } else {\r\n                    history.push('/');\r\n                }\r\n            });\r\n\r\n        }\r\n    \r\n    }, [id, history]);\r\n\r\n    return (\r\n        <>\r\n            <Container component={Paper} className={classes.wrapper}>\r\n                <Typography className={classes.pageHeader} variant=\"h5\">{id ? translate('product.updateProduct') : translate('product.addProduct')}</Typography>\r\n\r\n                <form noValidate autoComplete=\"off\" onSubmit={formSubmit}>\r\n                    <FormGroup>\r\n                        <FormControl className={classes.mb2}>\r\n                            <TextField label={translate('productList.tableHeaders.name')} name=\"name\" required value={product.name}\r\n                                onChange={updateProductField}\r\n                                onBlur={validateForm}\r\n                                error={errors.name.length > 0}\r\n                                helperText={errors.name}\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl className={classes.mb2}>\r\n                            <TextField label={translate('productList.tableHeaders.ean')} name=\"ean\" required value={product.ean}\r\n                                onChange={updateProductField}\r\n                                onBlur={validateForm}\r\n                                error={errors.ean.length > 0}\r\n                                helperText={errors.ean}\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl className={classes.mb2}>\r\n                            <InputLabel>{translate('productList.tableHeaders.type')}</InputLabel>\r\n                            <Select name=\"type\" value={product.type} onChange={updateProductField} required >\r\n                                <MenuItem value=\"Ice-Cream\">Ice-Cream</MenuItem>\r\n                                <MenuItem value=\"Dessert\">Desert</MenuItem>\r\n                                <MenuItem value=\"Chocolate\">Chocolate</MenuItem>\r\n                                <MenuItem value=\"Cake\">Cake</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl className={classes.mb2}>\r\n                            <TextField label={translate('productList.tableHeaders.weight')} name=\"weight\" type=\"number\" required \r\n                                value={product.weight}\r\n                                onChange={updateProductField}\r\n                                onBlur={validateForm}\r\n                                error={errors.weight.length > 0}\r\n                                helperText={errors.weight}\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl className={classes.mb2}>\r\n                            <TextField label={translate('productList.tableHeaders.color')} name=\"color\" required value={product.color}\r\n                                onChange={updateProductField}\r\n                                onBlur={validateForm}\r\n                                error={errors.color.length > 0}\r\n                                helperText={errors.color}\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl className={classes.mb2}>\r\n                            <TextField label={translate('productList.tableHeaders.price')} name=\"price\" type=\"number\" value={product.price}\r\n                                onChange={updateProductField}\r\n                                onBlur={validateForm}\r\n                                error={errors.price.length > 0}\r\n                                helperText={errors.price}\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl className={classes.mb2}>\r\n                            <TextField label={translate('productList.tableHeaders.quantity')} name=\"quantity\" type=\"number\" \r\n                                value={product.quantity}\r\n                                onChange={updateProductField}\r\n                                onBlur={validateForm}\r\n                                error={errors.quantity.length > 0}\r\n                                helperText={errors.quantity}\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl className={classes.mb2}>\r\n                            <FormControlLabel\r\n                                name=\"active\"\r\n                                checked={product.active}\r\n                                control={<Checkbox color=\"primary\" />}\r\n                                label={translate('productList.tableHeaders.active')}\r\n                                labelPlacement=\"start\"\r\n                                className={classes.checkLabel}\r\n                                onChange={updateProductField}\r\n                            />\r\n                        </FormControl>\r\n                    </FormGroup>\r\n\r\n                    <div className={classes.btnContainer}>\r\n\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={history.goBack}>\r\n                            {translate('productList.cancelButton')}\r\n                    </Button>\r\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\" disabled={isInvalid}>\r\n                            {id ? translate('product.updateButton') : translate('productList.addButton')}\r\n                    </Button>\r\n\r\n                    </div>\r\n                </form>\r\n            </Container>\r\n        </>\r\n    );\r\n}","export function getUUID() {\r\n    // eslint gets funny about bitwise\r\n    /* eslint-disable */\r\n    return 'xyxxxyxyxyxy'.replace(/[xy]/g, c => {\r\n        const piece = (Math.random() * 16) | 0;\r\n        const elem = c === 'x' ? piece : (piece & 0x3) | 0x8;\r\n        return elem.toString(16);\r\n    });\r\n    /* eslint-enable */\r\n}","import React from 'react';\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: number;\r\n    value: number;\r\n}\r\n\r\nconst TabPanel = (props: TabPanelProps) => {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <>{children}</>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TabPanel;\r\n\r\n","import React from 'react';\r\nimport { IProduct } from '../../models/product';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Table, TableBody, TableCell, TableRow, CardContent } from '../../material.components';\r\nimport { CheckBox, CancelRounded } from '@material-ui/icons';\r\n\r\n\r\nconst ProductDetails = (props:{product:IProduct}) => {\r\n    const product = props.product;\r\n    const { t: translate } = useTranslation();\r\n\r\n    return (\r\n        <CardContent>\r\n            <Table>\r\n                <TableBody>\r\n                    <TableRow>\r\n                        <TableCell variant=\"head\" component=\"th\" width=\"200\">{translate('productList.tableHeaders.name')}</TableCell>\r\n                        <TableCell>{product.name}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell variant=\"head\" component=\"th\">{translate('productList.tableHeaders.ean')}</TableCell>\r\n                        <TableCell>{product.ean}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell variant=\"head\" component=\"th\">{translate('productList.tableHeaders.type')}</TableCell>\r\n                        <TableCell>{product.type}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell variant=\"head\" component=\"th\">{translate('productList.tableHeaders.weight')}</TableCell>\r\n                        <TableCell>{product.weight}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell variant=\"head\" component=\"th\">{translate('productList.tableHeaders.color')}</TableCell>\r\n                        <TableCell>{product.color}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell variant=\"head\" component=\"th\">{translate('productList.tableHeaders.price')}</TableCell>\r\n                        <TableCell>{`$${product.price}`}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell variant=\"head\" component=\"th\">{translate('productList.tableHeaders.quantity')}</TableCell>\r\n                        <TableCell>{product.quantity}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell variant=\"head\" component=\"th\">{translate('productList.tableHeaders.active')}</TableCell>\r\n                        <TableCell>{product.active ? <CheckBox color=\"primary\" /> : <CancelRounded color=\"secondary\" />}</TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </CardContent>\r\n    )\r\n}\r\n\r\nexport default ProductDetails\r\n","import React from 'react';\r\nimport { CardContent } from '../../material.components';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { IChartOptions } from '../../models/chart';\r\n\r\nconst ProductChart = (props: { chartOptions: IChartOptions | null }) => {\r\n    const options = props.chartOptions;\r\n    return (\r\n        <CardContent>\r\n            <HighchartsReact\r\n                highcharts={Highcharts}\r\n                options={options}\r\n            />\r\n        </CardContent>\r\n    )\r\n}\r\n\r\nexport default ProductChart;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { getCurrentLanguage, setCurrentLanguage } from '../../services/dataService';\r\nimport { Button, ButtonGroup } from '../../material.components';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst LanguageSelector = () => {\r\n    const { i18n } = useTranslation();\r\n    const [currentLang, setCurrentLang] = useState<string>('');\r\n\r\n    /**\r\n    * Switch the language.\r\n    * @remarks\r\n    * Set the current language in local state\r\n    * Set the current language in server\r\n    * Set the document's language attr value to current language\r\n    *\r\n    * @returns Void\r\n    */\r\n    const switchLanguage = (language: string) => {\r\n        i18n.changeLanguage(language);\r\n        setCurrentLang(language);\r\n        setCurrentLanguage(language);\r\n        window.document.documentElement.lang = language;\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCurrentLanguage().then((language:any) => {\r\n            setCurrentLang(language);\r\n            switchLanguage(language);\r\n        });\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <ButtonGroup size=\"small\" color=\"secondary\" className=\"language-switcher\">\r\n            <Button variant={currentLang === 'en' ? \"contained\" : \"outlined\"} onClick={(e) => switchLanguage('en')}>EN</Button>\r\n            <Button variant={currentLang === 'lt-LT' ? \"contained\" : \"outlined\"} onClick={(e) => switchLanguage('lt-LT')}>LT</Button>\r\n        </ButtonGroup>\r\n    )\r\n}\r\n\r\nexport default LanguageSelector\r\n","import i18n from 'i18next';\r\nimport Backend from 'i18next-xhr-backend';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\ni18n\r\n    .use(Backend)\r\n    .use(initReactI18next)\r\n    .init({\r\n        lng: 'en',\r\n        backend: {\r\n            /* translation file path */\r\n            loadPath: '/i18n/{{ns}}/{{lng}}.json'\r\n        },\r\n        fallbackLng: 'en',\r\n        debug: false,\r\n        ns: ['translations'],\r\n        defaultNS: 'translations',\r\n        keySeparator: false,\r\n        interpolation: {\r\n            escapeValue: false,\r\n            formatSeparator: ','\r\n        },\r\n        react: {\r\n            wait: true\r\n        }\r\n    })\r\n\r\nexport default i18n;","import React, { Suspense } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport { ProductsList, Product, ProductForm, LanguageSelector } from './components';\nimport { Container } from './material.components';\nimport './i18n/i18n';\n\nexport default function App() {\n  return (\n    <>\n      <Suspense fallback={null}>\n        <LanguageSelector />\n\n        <Container className=\"page-container\">\n          <Router>\n            <Switch>\n              <Route path=\"/products/add\">\n                <ProductForm />\n              </Route>\n              <Route path=\"/products/:id/edit\">\n                <ProductForm />\n              </Route>\n              <Route path=\"/products/:id\">\n                <Product />\n              </Route>\n              <Route path=\"/products\" exact>\n                <ProductsList />\n              </Route>\n              <Redirect to=\"/products\" />\n            </Switch>\n          </Router>\n        </Container>\n      </Suspense>\n    </>\n  );\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\n\nrender(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}